document()
library(devtools)
document(0)
document()
use_mit_license()
use_git()
check()
library(devtools)
check(0)
check()
check()
check()
check()
check()
use_vignette("PrePost")
library(devtools)
check()
document()
remotes::install_github("jrs0/icdb")
check()
icbd::server
library(devtools)
check()
load_all()
load_all()
document()
document()
check()
use_package("magrittr")
check()
check()
use_package("methods")
use_package(c(‘icdb’ ‘scales’ ‘stringr’ ‘tidyr’))
use_package("scales")
use_package("stringr")
use_package("tidyr")
check()
check()
use_r("zzz")
utils::globalVariables(".")
check()
use_package("rlang")
check()
check()
check()
check()
check()
document()
check()
library(devtools)
check()
remotes::install_github("jrs0/icbd")
check(0)
check()
use_package("icdb")
check(0)
check()
check()
pkgdown::build_site()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
install()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
usethis::use_pkgdown_github_pages()
library()
library(devtools)
check(0)
check()
document()
library(devtools)
load_all(0)
load_all()
library(PrePost)
x <- PrePost(nhs_number       = c("441", "720", "962"),
index_event_time = structure(c(164, 164, 165, class = c("POSIXct",  "POSIXt"), tzone = "GMT")),
window_pre       = 31,
window_post      = 30,
window_units     = "days")
load_all()
x <- PrePost(nhs_number       = c("441", "720", "962"),
index_event_time = structure(c(164, 164, 165, class = c("POSIXct",  "POSIXt"), tzone = "GMT")),
window_pre       = 31,
window_post      = 30,
window_units     = "days")
as.POSIXct(c("2000-10-10", "2000-10-10", "2000-10-10"))
as.POSIXct(c("2000-10-10", "2000-10-10", "2000-10-10"), tz="GMT")
x <- PrePost(nhs_number       = c("441", "720", "962"),
index_event_time = as.POSIXct(c("2000-10-10", "2000-10-10", "2000-10-10"), tz="GMT"),
window_pre       = 31,
window_post      = 30,
window_units     = "days")
load_all()
x <- PrePost(nhs_number       = c("441", "720", "962"),
index_event_time = as.POSIXct(c("2000-10-10", "2000-10-10", "2000-10-10"), tz="GMT"),
window_pre       = 31,
window_post      = 30,
window_units     = "days")
all(c("a", "b"))
all(c("a", "b")==FALSE)
all(FALSE==FALSE)
!all(c("a", "b")==FALSE)
document()
check()
use_package("lubridate")
library(devtools)
document(0)
document()
document()
document()
check()
check()
check()
check()
check()
check()
check()
use_package("bupaR")
check()
check()
library(devtools)
use_r("example")
document()
load_all()
n = 10
## Generate a random NHS number (not the real format)
nhs_numbers <- replicate(n, random_nhs_number())
start_date <- lubridate::ymd("2018-1-1")
end_date <- lubridate::ymd("2020-1-1")
index_event_time <- lubridate::as_datetime(
stats::runif(n,
as.numeric(as.POSIXct(start_date)),
as.numeric(as.POSIXct(end_date)))) %>%
as.character()
## Set the seed so that subsequent operations are repeatable
set.seed(seed)
seed = 1
## Set the seed so that subsequent operations are repeatable
set.seed(seed)
## Generate a random NHS number (not the real format)
nhs_number <- replicate(n, random_nhs_number())
## Generate random start and end times for each episode. Episodes
## do not overlap in this example, and each one starts when the previous
## one ends
start_date       <- lubridate::ymd("2018-1-1")
end_date         <- lubridate::ymd("2020-1-1")
index_event_time <- lubridate::as_datetime(
stats::runif(n,
as.numeric(as.POSIXct(start_date)),
as.numeric(as.POSIXct(end_date)))) %>%
as.character()
## Make the data frame with the episode data
tbl <- tibble::tibble(nhs_number = nhs_number,
index_event_time = index_event_time)
View(tbl)
filename = cohort.db
filename = "cohort.db"
stopifnot(n >= 1)
## Create the gendata/ folder if it does not exist
if (!dir.exists("gendata"))
{
dir.create("gendata")
}
## Set the seed so that subsequent operations are repeatable
set.seed(seed)
## Generate a random NHS number (not the real format)
nhs_number <- replicate(n, random_nhs_number())
## Generate random start and end times for each episode. Episodes
## do not overlap in this example, and each one starts when the previous
## one ends
start_date       <- lubridate::ymd("2018-1-1")
end_date         <- lubridate::ymd("2020-1-1")
index_event_time <- lubridate::as_datetime(
stats::runif(n,
as.numeric(as.POSIXct(start_date)),
as.numeric(as.POSIXct(end_date)))) %>%
as.character()
## Make the data frame with the episode data
tbl <- tibble::tibble(nhs_number = nhs_number,
index_event_time = index_event_time)
## Create the database
path <- paste0("gendata/", filename)
con <- DBI::dbConnect(RSQLite::SQLite(), path)
## In case the file already exists and the table exists, remove the table
if (DBI::dbExistsTable(con, "COHORT_SYNTH")) {
DBI::dbRemoveTable(con, "COHORT_SYNTH")
}
## Make a new table from the data frame
DBI::dbWriteTable(con, name="COHORT_SYNTH",
value = tbl, overwrite = TRUE)
DBI::dbDisconnect(con)
message("Written generated cohort data to '", path, "'")
usethis::use_vignette("descriptives")
gen_cohort("cohort.db")
prepost_example <- function(){
gen_cohort("cohort.db")
}
document()
load_all()
gen_cohort("cohort.db")
load_all()
gen_example_cohort("test.db")
gen_example_imd_lsoa("Analyst_SQL_Area.db")
gen_example_swd_attributes_hist("MODELLING_SQL_AREA.db")
gen_example_swd_activity("MODELLING_SQL_AREA.db")
gen_example_cambridge("MODELLING_SQL_AREA.db")
system.file("extdata", "sqlite_cohort.yml", package="PrePost")
icdb::server(config = system.file("extdata", "sqlite_cohort.yml", package="PrePost"))
srv <- example_server()
load_all()
srv <- example_server()
srv$MODELLING_SQL_AREA$COHORT_SYNTH$nhs_number
srv$MODELLING_SQL_AREA$COHORT_SYNTH$nhs_number |> run()
srv$MODELLING_SQL_AREA$COHORT_SYNTH$nhs_number |> icdb::run()
srv$MODELLING_SQL_AREA
prepost_example()
gen_example_cohort("cohort.db")
gen_example_imd_lsoa("Analyst_SQL_Area.db")
gen_example_swd_attributes_hist("MODELLING_SQL_AREA.db")
gen_example_swd_activity("MODELLING_SQL_AREA.db")
gen_example_cambridge("MODELLING_SQL_AREA.db")
load_all()
prepost_example()
prepost_example()
gen_example_cohort("cohort.db")
gen_example_imd_lsoa("Analyst_SQL_Area.db")
gen_example_swd_attributes_hist("MODELLING_SQL_AREA.db")
gen_example_swd_activity("MODELLING_SQL_AREA.db")
gen_example_cambridge("MODELLING_SQL_AREA.db")
debugonce(prepost_example)
prepost_example()
document()
document()
